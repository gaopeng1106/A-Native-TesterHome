package com.testerhome.nativeandroid.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.testerhome.nativeandroid.dao.TopicDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TOPIC_DB.
*/
public class TopicDBDao extends AbstractDao<TopicDB, Long> {

    public static final String TABLENAME = "TOPIC_DB";

    /**
     * Properties of entity TopicDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Is_hot = new Property(2, Boolean.class, "is_hot", false, "IS_HOT");
        public final static Property Is_excellent = new Property(3, Boolean.class, "is_excellent", false, "IS_EXCELLENT");
        public final static Property Created_at = new Property(4, Long.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(5, Long.class, "updated_at", false, "UPDATED_AT");
        public final static Property Replied_at = new Property(6, Long.class, "replied_at", false, "REPLIED_AT");
        public final static Property Replies_count = new Property(7, Integer.class, "replies_count", false, "REPLIES_COUNT");
        public final static Property Node_id = new Property(8, Integer.class, "node_id", false, "NODE_ID");
        public final static Property Node_name = new Property(9, String.class, "node_name", false, "NODE_NAME");
        public final static Property Last_reply_user_id = new Property(10, Integer.class, "last_reply_user_id", false, "LAST_REPLY_USER_ID");
        public final static Property Last_reply_user_login = new Property(11, String.class, "last_reply_user_login", false, "LAST_REPLY_USER_LOGIN");
        public final static Property User_id = new Property(12, Integer.class, "user_id", false, "USER_ID");
    };


    public TopicDBDao(DaoConfig config) {
        super(config);
    }
    
    public TopicDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TOPIC_DB' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'IS_HOT' INTEGER," + // 2: is_hot
                "'IS_EXCELLENT' INTEGER," + // 3: is_excellent
                "'CREATED_AT' INTEGER," + // 4: created_at
                "'UPDATED_AT' INTEGER," + // 5: updated_at
                "'REPLIED_AT' INTEGER," + // 6: replied_at
                "'REPLIES_COUNT' INTEGER," + // 7: replies_count
                "'NODE_ID' INTEGER," + // 8: node_id
                "'NODE_NAME' TEXT," + // 9: node_name
                "'LAST_REPLY_USER_ID' INTEGER," + // 10: last_reply_user_id
                "'LAST_REPLY_USER_LOGIN' TEXT," + // 11: last_reply_user_login
                "'USER_ID' INTEGER);"); // 12: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TOPIC_DB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TopicDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Boolean is_hot = entity.getIs_hot();
        if (is_hot != null) {
            stmt.bindLong(3, is_hot ? 1l: 0l);
        }
 
        Boolean is_excellent = entity.getIs_excellent();
        if (is_excellent != null) {
            stmt.bindLong(4, is_excellent ? 1l: 0l);
        }
 
        Long created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(5, created_at);
        }
 
        Long updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(6, updated_at);
        }
 
        Long replied_at = entity.getReplied_at();
        if (replied_at != null) {
            stmt.bindLong(7, replied_at);
        }
 
        Integer replies_count = entity.getReplies_count();
        if (replies_count != null) {
            stmt.bindLong(8, replies_count);
        }
 
        Integer node_id = entity.getNode_id();
        if (node_id != null) {
            stmt.bindLong(9, node_id);
        }
 
        String node_name = entity.getNode_name();
        if (node_name != null) {
            stmt.bindString(10, node_name);
        }
 
        Integer last_reply_user_id = entity.getLast_reply_user_id();
        if (last_reply_user_id != null) {
            stmt.bindLong(11, last_reply_user_id);
        }
 
        String last_reply_user_login = entity.getLast_reply_user_login();
        if (last_reply_user_login != null) {
            stmt.bindString(12, last_reply_user_login);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(13, user_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TopicDB readEntity(Cursor cursor, int offset) {
        TopicDB entity = new TopicDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // is_hot
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // is_excellent
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // created_at
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // updated_at
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // replied_at
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // replies_count
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // node_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // node_name
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // last_reply_user_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // last_reply_user_login
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // user_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TopicDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIs_hot(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setIs_excellent(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setCreated_at(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUpdated_at(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setReplied_at(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setReplies_count(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNode_id(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNode_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLast_reply_user_id(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setLast_reply_user_login(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUser_id(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TopicDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TopicDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
